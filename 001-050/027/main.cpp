/*
 * Project Euler - Problem 27
 * Quadratic Primes
 *
 * Just try every possible |a| < 1000, |b| < 1000
 * Note that when n = 0
 *
 *                        n^2 + an + b = b
 *
 * So clearly we don't need to try negative values of b -- we won't get a
 * prime.
 */

#include <ctime>
#include <iostream>
#include <cmath>

using namespace std;



// Simple primality test by trial division
bool isPrime(const int p)
{
  if (p < 2) return false;
  const int ROOTP = sqrt(p);

  for (int i = 2; i <= ROOTP; i++)
    if (p % i == 0) return false;
  return true;
}



// Count the number of consecutive primes generated by
// n^2 + an + b, for n >= start
int count(const int a, const int b, const int start)
{
  int n = start;

  if ( !isPrime( n*n + a*n + b ) )
    return -1;

  n = 0;

  while ( isPrime( n*n + a*n + b ) )
    n++;

  return n;
}



int main (int argc, char* argv[])
{
  int A, B, P = 0;

  // Calculate...
  // For each |a| < 1000
  for (int a = -999; a < 1000; a++)
  {
    // For each |b| < 1000
    for (int b = 0; b < 1000; b++)
    {
      // Count consecutive primes
      int p = count(a, b, P);
      if (p > P)
      {
        P = p;
        A = a;
        B = b;
      }
    }
  }
  
  cout << "a = " << A << endl;
  cout << "b = " << B << endl;
  cout << A * B << endl;
  double t = clock() / (double)CLOCKS_PER_SEC;
  cout << "Time taken: " << t << " seconds." << endl;

  return 0;
}
